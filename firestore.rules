rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() { return request.auth != null; }
    function uid() { return request.auth.uid; }
    // Membership: top-level groupMembers/{groupId}:{userId}
    function isGroupMember(groupId) {
      return isSignedIn() && exists(/databases/$(database)/documents/groupMembers/$(groupId + ':' + uid()));
    }

    // Groups
    match /groups/{groupId} {
      allow read: if isGroupMember(groupId);
      // Client writes are restricted; use Cloud Functions
      allow write: if false;
    }

    // Group messages
    match /groupMessages/{groupId}/messages/{messageId} {
      allow read: if isGroupMember(groupId);
      // Client writes are restricted; use Cloud Functions
      allow write: if false;
    }

    // Group membership documents
    match /groupMembers/{docId} {
      // Allow users to read their own membership records
      allow read: if isSignedIn() && resource.data.userId == uid();
      allow write: if false;
    }


    // Presence â€” user can only write own
    match /presence/{userId} {
      // Any signed-in user can read presence
      allow read: if isSignedIn();
      // Only the owner can create/update/delete their presence document
      allow create, update: if isSignedIn() && request.auth.uid == userId &&
        request.resource.data.keys().hasOnly(['online','lastSeen','typingIn']) &&
        (request.resource.data.online == null || request.resource.data.online is bool) &&
        (request.resource.data.lastSeen == null || request.resource.data.lastSeen is timestamp) &&
        (request.resource.data.typingIn == null || request.resource.data.typingIn is string);
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    // Proposals rules are implemented in FB.2.2 task
  }
}
