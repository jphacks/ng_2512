version: "3.9"

services:
  db:
    image: postgres:15-alpine
    env_file:
      - deploy/.env.mobile-e2e
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-recall}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-recall}
      POSTGRES_DB: ${POSTGRES_DB:-recall}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-recall}"]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    env_file:
      - deploy/.env.mobile-e2e
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  vllm:
    image: python:3.11-slim
    env_file:
      - deploy/.env.mobile-e2e
    command:
      [
        "python",
        "-c",
        "from http.server import BaseHTTPRequestHandler, HTTPServer\nclass Handler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-Type', 'application/json')\n        self.end_headers()\n        self.wfile.write(b'{\"status\":\"ok\"}')\n    def log_message(self, *args, **kwargs):\n        return\nHTTPServer(('0.0.0.0', 8008), Handler).serve_forever()\n",
      ]
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://127.0.0.1:8008').read()",
        ]
      interval: 5s
      timeout: 3s
      retries: 10

  api:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: prod
    env_file:
      - deploy/.env.mobile-e2e
    environment:
      FLASK_APP: ${FLASK_APP:-backend.app:create_app}
      DATABASE_URL: ${DATABASE_URL:-postgresql+psycopg2://recall:recall@db:5432/recall}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      VLLM_ENDPOINT: ${VLLM_ENDPOINT:-http://vllm:8008}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      vllm:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://127.0.0.1:8000/healthz').read()",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    expose:
      - "8000"

volumes:
  postgres-data:
